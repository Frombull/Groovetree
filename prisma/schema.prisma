generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  pages     Page[] // User can have multiple pages
}

model Page {
  id                 String  @id @default(cuid())
  slug               String  @unique // Username in the URL /artist-name/
  title              String
  bio                String?
  avatarUrl          String?
  backgroundColor    String?
  textColor          String?
  backgroundImageUrl String?

  userId String
  user   User    @relation(fields: [userId], references: [id])
  links  Link[]
  events Event[]
  embeds Embed[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum LinkType {
  GENERIC
  SPOTIFY
  APPLE_MUSIC
  DEEZER
  YOUTUBE
  SOUNDCLOUD
  BEATPORT
  INSTAGRAM
  TIKTOK
  TOUR
}

model Link {
  id       String   @id @default(cuid())
  title    String
  url      String
  embedUrl String?  // URL do embed (opcional, gerado automaticamente)
  type     LinkType @default(GENERIC)
  order    Int      @default(0)
  isActive Boolean  @default(true)

  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id        String   @id @default(cuid())
  title     String
  venue     String
  city      String
  state     String?  // Estado (opcional)
  date      DateTime
  ticketUrl String?
  isActive  Boolean  @default(true)

  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Embed {
  id       String  @id @default(cuid())
  title    String?
  embedUrl String
  type     String // "YOUTUBE_VIDEO", "SPOTIFY_ALBUM"
  order    Int     @default(0)
  isActive Boolean @default(true)

  pageId    String
  page      Page     @relation(fields: [pageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
